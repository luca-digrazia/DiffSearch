matrix.highlight_columns(X_COLOR, Y_COLOR) --> matrix.set_color_columns(X_COLOR, Y_COLOR)$31
self.stdscr.ID() --> self.stdscr.ID()$2
return self._sep_token --> return None$1
ID<0>(EXPR) --> ID<0>(EXPR % (ID, ID.ID))$326
out = ID<0>._handle_response(response) --> ID<0>._handle_response(response)$8
if ID: --> if ID and show("license"):$1
ID<0>.ID(X_COLOR, Y_COLOR) --> ID<0>.ID(X_COLOR, Y_COLOR)$74
if license_: --> if license_ and show("license"):$1
words.ID(DOWN) --> words.ID(DOWN)$5
ID = ID<0>.ID(<...>) --> ID<0>.ID(<...>)$541
items = rcol.perform_collect() --> rcol.perform_collect()\nitems = rcol.items$5
out = ID<0>.ID(response) --> ID<0>.ID(response)$8
return ID<0>.ID(EXPR) --> return ID<0>.ID(EXPR)$1139
ID = ID.ID<0>(<...>) --> ID = ID.ID.ID<0>(<...>)$1138
if ID: --> if ID and ID:$46
ID<0>('Epoch %d' % epoch) --> ID<0>('Epoch %d out of %d' % (epoch, self.nb_epoch))$1
self.ID(ID) --> self.blob_writer.ID(ID)$2
if EXPR: --> if ID or ID:$37
self.blob_write(ID) --> self.blob_writer.write(ID)$2
outcome = RunExecutor.ID<0>(self) --> outcome = RunExecutor.ID<0>(self, False)$2
ID<0>.ID() --> ID<0>.ID(<...>)$6706
if ID: --> if ID and c:$1
pg = p.path_group() --> pg = p.factory.path_group()$2
pg = p.ID<0>() --> pg = p.ID.ID<0>()$2
self.ID.ID() --> self.ID.ID()$735
items = ID.ID<0>() --> ID.ID<0>()\nitems = rcol.items$5
outcome = RunExecutor.execute(self) --> outcome = RunExecutor.execute(self, False)$2
if download_mirrors: --> if download_mirrors or conf.settings['download_mirrors']:$1
if tools_paths: --> if tools_paths or tools_env_vars:$1
if EXPR: --> if ID and ID:$47
return ID --> return LT$1972
ID<0>.to_gpu() --> ID<0>.ID(device)$8
return ID --> return ID(<...>)$327
self.stdscr.clear() --> self.stdscr.erase()$2
pg = p.ID<0>() --> pg = p.factory.ID<0>()$2
exit(0) --> sys.exit(0)$6
items = rcol.ID<0>() --> rcol.ID<0>()\nitems = rcol.items$5
return ID.ID(LT) --> return ID.ID(LT)$677
return self.ID --> return LT$47
out = feed._handle_response(response) --> feed._handle_response(response)$8
ID.ID() --> ID.ID(<...>)$7130
if ID: --> if ID or ID:$33
if ID: --> if ID and ID("license"):$1
return EXPR --> return EXPR$28046
ID<0>.highlight_columns(X_COLOR, Y_COLOR) --> ID<0>.set_color_columns(X_COLOR, Y_COLOR)$35
ID<0>(<...>) --> ID.ID<0>(<...>)$625
return ID --> return None$107
return ID.ID(<...>) --> return EXPR$6839
return test --> return LT$1
ID.ID(DOWN) --> ID.ID(DOWN)$75
if ID<0>: --> if ID<0> or ID.settings['download_mirrors']:$1
return self.ID --> return None$10
ID = ID.ID<0>(EXPR) --> ID = ID.ID<0>(EXPR, EXPR)$525
ID.ID(<...>) --> ID.ID.ID(<...>)$1750
print("Creating table reference") --> print("Creating table [unicode_test] reference")$1
print('Epoch %d' % epoch) --> print('Epoch %d out of %d' % (epoch, self.nb_epoch))$1
if ID<0>: --> if ID<0> or conf.settings['download_mirrors']:$1
ID('Executed specified command via WMI') --> ID('{}:{} Executed command via WMIEXEC'.format(self.__win32Process.get_target(),settings.args.port))$1
if ID: --> if ID and ID(EXPR):$7
words.arrange_submobjects(DOWN) --> words.arrange(DOWN)$5
print_succ('Executed specified command via WMI') --> print_succ('{}:{} Executed command via WMIEXEC'.format(self.__win32Process.get_target(),settings.args.port))$1
ID<0>(0) --> sys.ID<0>(0)$6
ID("Creating table reference") --> ID("Creating table [unicode_test] reference")$1
ID.ID.ID(<...>) --> self.ID.ID()$788
ID<0>.to_gpu() --> ID<0>.to_device(device)$8
if ID: --> if ID or tools_env_vars:$1
outcome = ID.ID<0>(self) --> outcome = ID.ID<0>(self, False)$2
self.blob_write(extra_data) --> self.blob_writer.write(extra_data)$1
ID.ID.ID(LT) --> ID.ID.ID(LT)$2033
return test --> return None$1
if ID<0>: --> if ID<0> or EXPR:$48
while EXPR: <...> --> while EXPR: <...>$354
ID<0>(0) --> ID.ID<0>(0)$8
ID = ID.ID<0>(<...>) --> ID.ID<0>(<...>)$353
ID.ID(<...>) --> ID.ID()$6809
return ID.ID --> return LT$83
if add_constraints: --> if add_constraints and c:$1
model.to_gpu() --> model.to_device(device)$6
ID<0>('Epoch %d' % ID) --> ID<0>('Epoch %d out of %d' % (ID, self.nb_epoch))$1
