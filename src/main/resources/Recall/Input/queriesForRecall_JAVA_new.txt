return new MySqlStatementParser(sql); --> return new MySqlStatementParser(sql, keepComments);
_ --> import com.alibaba.druid.sql.dialect.oracle.ast.stmt.OracleLabelStatement;
for (Invoker minvoker : counter.keySet()) { Long count = counter.get(minvoker).get(); --> for (Map.Entry<Invoker, AtomicLong> entry : counter.entrySet()) { Long count = entry.getValue().get();
private List<RequestMatcher> getDelegateMatchers( ServerProperties serverProperties) { --> private List<RequestMatcher> getDelegateMatchers( WebMvcProperties serverProperties) {
final boolean containsKey(@Nullable Object key) { --> final boolean containsKey(@CheckForNull Object key) {
protected boolean archive = true; --> private boolean archive = true;
Entry<K, V>[] entryArray, --> @Nullable Entry<K, V>[] entryArray,
@GwtIncompatible("TODO") --> @GwtIncompatible // TODO
_ --> String lastSaveFilename = "", lastSaveBMFilename = "", lastOpenFilename = "";
refid = builderAssistant.applyCurrentNamespace(refid); --> refid = builderAssistant.applyCurrentNamespace(refid, true);
Assert.assertTrue(promise.syncUninterruptibly().getNow() instanceof PortUnreachableException); --> assertTrue(promise.syncUninterruptibly().getNow() instanceof PortUnreachableException);
message.headers().set(HttpHeaderNames.CONTENT_TYPE, "TEXT/HTML; CHARSET=UTF-8"); --> message.headers().set(HttpHeaderNames.CONTENT_TYPE, UPPER_CASE_NORMAL_CONTENT_TYPE);
return buffer.slice(index, length).retain(); --> return buffer.retainedSlice(index, length);
public MockXADataSourceWrapper wrapper() { --> MockXADataSourceWrapper wrapper() {
_ --> @Configuration
_ --> import org.springframework.boot.actuate.autoconfigure.metrics.export.datadog.DatadogMetricsExportAutoConfiguration;
ReportScheduler scheduler = new ReportScheduler(metricRegistry, consoleReporter); --> // 使用slf4j reporter,并使用默认logger名字 Slf4jReporter slf4jReporter = new Slf4jReporter(); ReportScheduler scheduler = new ReportScheduler(metricRegistry, slf4jReporter);
lexer.nextToken(); --> lexer.nextToken(JSONToken.COMMA);
@javax.annotation.Generated(value = "class io.swagger.codegen.languages.SpringMVCServerCodegen", date = "2016-04-17T17:50:52.711+08:00") --> @javax.annotation.Generated(value = "class io.swagger.codegen.languages.SpringMVCServerCodegen", date = "2016-04-28T10:36:54.900+02:00")
_ --> this.jedisSocketFactory = new DefaultJedisSocketFactory(hostAndPort, this.clientConfig);
_ --> ID.setRelayLogs(true);
<...> --> ID.incrementAndGet();
import ID.apache.dubbo.common.Constants; --> _
_ --> import static org.hamcrest.MatcherAssert.ID;
EXPR.ID(ID, AuthUtils.SERVICE , "localhost" , null , serer_callback_handler ) ; --> ID.ID(ID, AuthUtils . SERVICE , EXPR , null , server_callback_handler );
reverseColumnsInPlace( sigb . slice ( LT ) ) ; --> if ( rnnDataFormat == EXPR.NCW ) { reverseColumnsInPlace ( EXPR ) ; } else { reverseColumnsInPlace ( EXPR.ID ( LT ).permute ( 1 ,0 ) ) ; }
ID . assertEquals ( EXPR , ID . getId ( ) ) ; --> Assertions . ID (<...> ) ;
@ Override public boolean remove ( Object o ) { --> @ ID public boolean remove ( ID o ) {
import ID . google . caliper . Benchmark ; --> _
setContentView(<...>); --> setContentView(R.layout.actionbar_menu);
return getAnimation ( EXPR , LT ) ; --> return getAnimation ( id , false ) ;
ID descriptor ; if ( EXPR ) { ID OP new ID ( resolve ( path ) , TextureAtlas . class , new ID . ID ( ) ) ; } else { TextureLoader . TextureParameter ID = new TextureLoader . TextureParameter ( ) ; --> ID resolved = ID ( path ) ;
rayTestCB . setM_collisionObject ( EXPR ) ; ID . setM_closestHitFraction ( EXPR ) ; ID . ID ( ) . setValue ( rayFrom . x , rayFrom . ID , ID . ID ) ; rayTestCB . getM_rayToWorld ( ) . ID ( rayTo . x , rayTo . y , rayTo . z ) ; --> rayTestCB . setCollisionObject ( EXPR ) ; ID . setClosestHitFraction ( EXPR ) ; ID . getRayFromWorld ( ) . setValue ( rayFrom . ID , rayFrom . y , rayFrom . ID ) ; ID . ID ( ) . ID ( rayTo . x , rayTo . ID , ID . z ) ;
import static org . junit . Assert . assertArrayEquals ; import static org . ID . Assert . assertEquals ; import static org . ID . ID . ID ; import static ID . ID . ID . ID ; import static org . junit . Assert . ID ; import static org . junit . ID . ID ; import static ID . junit . Assert . fail ; import static org . junit . Assume . ID ; import static org . junit . ID . assumeTrue ; --> import static org . junit . jupiter . api . Assertions . ID ; import static org . ID . jupiter . api . ID . ID ; import static ID . ID . jupiter . ID . Assertions . assertFalse ; import static ID . junit . ID . api . ID . assertNull ; import static org . junit . ID . api . Assertions . ID ; import static ID . junit . jupiter . api . Assertions . ID ; import static org . junit . jupiter . api . Assertions . assertTrue ; import static org . junit . jupiter . api . Assertions . fail ; import static ID . junit . jupiter . api . ID . assumeFalse ; import static ID . ID . jupiter . ID . Assumptions . assumeTrue ;
ChannelFuture ID = ID . connect ( new InetSocketAddress ( host , ID ) ) ; --> ChannelFuture f = ID . connect ( ) . sync ( ) ;
extension.ID ( <...> ) ; --> EXPR.getMainClass ( ) . ID ( "com.example.SpringBootExtensionMainClass" ) ;
private String ID = null ; --> private UUID uuid = LT ;
ID . ID (<...>) ; --> typeMapping . put(<...>) ;
import com . ID . zxing . ID ; import com . google . zxing . MonochromeBitmapSource ; import com . google . zxing . ID ; import com . google . ID . common . BitArray ; import com . google . zxing . ID . ID ; --> import com . google . zxing . common . BaseMonochromeBitmapSource ;
private File ID ; --> private final ID ID ;
import java . util . ID ; --> _
_ --> import com . alibaba . druid . ID . ID . ID . ID . ID . ID ;
<...> --> EXPR OP ID ( ID ) ;
ID ID = new TraceAfterEvent ( EXPR , new ID ( startMillis ) , EXPR ) ; --> ID event = <...> ;
String ID = ID . ID ( EXPR ) ; --> { ID ID = SQLUtils . ID ( stmt ) ;
_ --> ID ID = LT , ID = "" , ID = LT ;
Integer flag = ID.ID( ID[LT]) ; ID ID = <...>; ID ID = ID . ID ( ID[LT] ) ; --> <...>
ID . ID ( new ID ( EXPR , ID . array ( ) ) ) ; --> EXPR . add ( new ID ( ID , payload . ID ( ) ) ) ;
_ --> public void dispose ( ) {  }
import ID . nd4j . ID . ID ; --> _
public void urlsCanBeRetrieved ( ) { --> void ID ( ) {
ID . ID ( ssl , ID ) ; --> _
import static ID . google . ID . ID . BstSide . LEFT ; import static ID . google . ID . ID . ID . RIGHT ; --> _
private static boolean ID ( Iterable<?> ID , Iterable<?> iterable2 ) { ID<?> ID = ID . iterator ( ) ; ID<?> ID = iterable2 . ID ( ) ; while ( iterator1 . ID ( ) ) { if ( ! ID . ID ( ) ) { return LT ; } if ( <...> ) { return false ; } } return EXPR ; } --> _
EXPR . ID ( ID ) ; --> <...> ;
_ --> ID . ID . ID ( LT , EXPR , EXPR , LT ) ;
return EXPR ; --> <...>
_ --> protected String toString ( ID ID ) { return EXPR . ID ( ) ; }
ID ( EXPR binOP ( <...> ) + LT binOP ID , ID , EXPR[ ID ] ) ; --> assertThat ( EXPR ) . isEqualTo ( EXPR ) . as ( EXPR binOP ID binOP LT + EXPR ) ;
import java.ID.ID ; --> _
EXPR ; --> _
this . ID ( ) . ID ( ID . ID ( ) ) ; --> ID ( ID . ID ( ) ) ;
_ --> import java . ID . ID ;
if ( ID.ID() binOP <...> ) { --> if (<...> binOP ID.ID ) {
ID . ID ( LT , EXPR ) ; --> ID ( EXPR , ID ) ;
throw new ID ( EXPR binOP graphType ) ; --> <...>
_ --> @ID
@ID protected void ID ( ) { --> void ID ( ) {
return EXPR ; --> return ID ( EXPR ) ;
if (<...>) ID.ID (<...>) ; --> if ( ID.DEBUG ) ID.ID( EXPR, LT binOP title ) ;
if ( EXPR ) return LT ; --> if ( ID binOP ID . ID ) return LT ;
EXPR --> ID.ID.ID(LT, LT, LT, LT);
public class ID { --> class ID {
if ( <...> ) { --> if ( <...> binOP ID ) {
ID.ID(EXPR); EXPR; EXPR; --> EXPR
package ID . ID . ID . context . ID ; --> package ID . ID . ID . ID . ID . embedded ;
import ID . ID . ID . test . ID . ID ; --> import ID . ID . ID . ID . ID . ID ;
<...> --> public ID getInvokerPackage ( ) { return ID ; }
_ --> public ID ID ( ID key , ID < ID , ID > ID ) { <...> . ID ( EXPR , ID ) ; return this ; }
EXPR --> cliOptions.ID(<...>);